
#include <stdio.h>
#include <iostream>
#include <list>
using namespace std;
#include <typeinfo>

// It is FactoryOfFactory
// Additional layer is added and similar shapes are grouped together in concrete factory

class shape{
  public:
  virtual void draw()=0;
};

class circle:public shape{
  public:
  void draw()
  {
      cout << "DRAW CIRCLE" << endl;
  }
};

class square:public shape{
  public:
  void draw()
  {
      cout << "DRAW SQUARE" << endl;
  }
};

class elipse:public shape{
  public:
  void draw()
  {
      cout << "DRAW ELIPSE" << endl;
  }
};

class rectangle:public shape{
  public:
  void draw()
  {
      cout << "DRAW RECTANGLE" << endl;
  }
};

class factoryoffactory{
     public:
     virtual shape* getshape(string name)=0;
};

class roundshape:public factoryoffactory{
  public:
   shape* getshape(string name)
  {
      if(name=="Circle")
      return new circle();
      else if (name=="Elipse")
      return new elipse();
      return NULL;
  }
};

class squareshape:public factoryoffactory{
  public:
   shape* getshape(string name)
  {
      if(name=="Rectangle")
      return new rectangle();
      else if (name=="Square")
      return new square();
      return NULL;
  }
};

int main(){
    
factoryoffactory* factoryptr=new roundshape();
factoryoffactory* factoryptr1=new squareshape();

shape *shapeptr=factoryptr->getshape("Elipse");
shape *shapeptr1=factoryptr1->getshape("Square");

if(shapeptr) shapeptr->draw();
if(shapeptr1) shapeptr1->draw();

delete shapeptr;
delete shapeptr1;
return 0;
}

